//Sudoku puzzles solver
#include <iostream>
#include <vector>
#include <cmath>

const int N = 9; // Size of Sudoku grid

// Function to print the Sudoku grid
void printGrid(const std::vector<std::vector<int>>& grid) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j)
            std::cout << grid[i][j] << " ";
        std::cout << std::endl;
    }
}

// Function to check if a number can be placed at a specific position
bool isSafe(const std::vector<std::vector<int>>& grid, int row, int col, int num) {
    // Check if the number is not present in the current row and column
    for (int x = 0; x < N; ++x) {
        if (grid[row][x] == num || grid[x][col] == num)
            return false;
    }

    // Check if the number is not present in the 3x3 subgrid
    int subgridSize = static_cast<int>(sqrt(N));
    int startRow = row - row % subgridSize;
    int startCol = col - col % subgridSize;
    for (int i = 0; i < subgridSize; ++i) {
        for (int j = 0; j < subgridSize; ++j) {
            if (grid[i + startRow][j + startCol] == num)
                return false;
        }
    }

    return true;
}

// Function to find an empty position in the grid
bool findEmptyPosition(const std::vector<std::vector<int>>& grid, int& row, int& col) {
    for (row = 0; row < N; ++row) {
        for (col = 0; col < N; ++col) {
            if (grid[row][col] == 0)
                return true;
        }
    }
    return false;
}

// Sudoku solver using backtracking
bool solveSudoku(std::vector<std::vector<int>>& grid) {
    int row, col;

    // If there is no empty position, the puzzle is solved
    if (!findEmptyPosition(grid, row, col))
        return true;

    // Try placing numbers 1 to 9 at the current position
    for (int num = 1; num <= N; ++num) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;

            // Recur to solve the rest of the puzzle
            if (solveSudoku(grid))
                return true;

            // If placing the current number leads to an invalid solution, backtrack
            grid[row][col] = 0;
        }
    }

    // No number can be placed at this position
    return false;
}

int main() {
    std::vector<std::vector<int>> sudokuGrid = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    std::cout << "Sudoku Puzzle:" << std::endl;
    printGrid(sudokuGrid);

    if (solveSudoku(sudokuGrid)) {
        std::cout << "\nSudoku Solution:" << std::endl;
        printGrid(sudokuGrid);
    } else {
        std::cout << "\nNo solution exists." << std::endl;
    }

    return 0;
}
