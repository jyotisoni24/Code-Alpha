// File manager 
#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>

namespace fs = std::filesystem;

void listFiles(const std::string& path) {
    for (const auto& entry : fs::directory_iterator(path)) {
        std::cout << entry.path().filename() << std::endl;
    }
}

void viewFile(const std::string& filename) {
    std::ifstream file(filename);
    if (file.is_open()) {
        std::cout << "Contents of " << filename << ":\n";
        std::cout << "------------------------\n";
        std::cout << file.rdbuf();
        std::cout << "------------------------\n";
        file.close();
    } else {
        std::cerr << "Unable to open file: " << filename << std::endl;
    }
}

void createDirectory(const std::string& path) {
    if (fs::create_directory(path)) {
        std::cout << "Directory created: " << path << std::endl;
    } else {
        std::cerr << "Failed to create directory: " << path << std::endl;
    }
}

void copyFile(const std::string& source, const std::string& destination) {
    try {
        fs::copy(source, destination, fs::copy_options::overwrite_existing);
        std::cout << "File copied from " << source << " to " << destination << std::endl;
    } catch (const fs::filesystem_error& e) {
        std::cerr << "Error copying file: " << e.what() << std::endl;
    }
}

void moveFile(const std::string& source, const std::string& destination) {
    try {
        fs::rename(source, destination);
        std::cout << "File moved from " << source << " to " << destination << std::endl;
    } catch (const fs::filesystem_error& e) {
        std::cerr << "Error moving file: " << e.what() << std::endl;
    }
}

int main() {
    std::string currentPath = fs::current_path().string();

    while (true) {
        std::cout << "Current directory: " << currentPath << std::endl;
        std::cout << "1. List files\n2. View file\n3. Create directory\n4. Copy file\n5. Move file\n6. Exit\n";
        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1:
                listFiles(currentPath);
                break;
            case 2: {
                std::string filename;
                std::cout << "Enter file name: ";
                std::cin >> filename;
                viewFile(currentPath + "/" + filename);
                break;
            }
            case 3: {
                std::string dirName;
                std::cout << "Enter directory name: ";
                std::cin >> dirName;
                createDirectory(currentPath + "/" + dirName);
                break;
            }
            case 4: {
                std::string source, destination;
                std::cout << "Enter source file name: ";
                std::cin >> source;
                std::cout << "Enter destination file name: ";
                std::cin >> destination;
                copyFile(currentPath + "/" + source, currentPath + "/" + destination);
                break;
            }
            case 5: {
                std::string source, destination;
                std::cout << "Enter source file name: ";
                std::cin >> source;
                std::cout << "Enter destination file name: ";
                std::cin >> destination;
                moveFile(currentPath + "/" + source, currentPath + "/" + destination);
                break;
            }
            case 6:
                return 0;
            default:
                std::cerr << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
